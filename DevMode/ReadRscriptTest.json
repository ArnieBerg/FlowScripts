{
  "FlowScriptName": "ReadRscriptTest",
  "TestConfig": {},
  "SubmissionTimeStamp": "",
  "LockUsername": null,
  "Comment": "",
  "DataSourceType": 2,
  "SerializeDataSteps": false,
  "SampleList": {
    "isPCR": "1[S]/mnt/e/data/std_testing/isPCR/primers.txt"
  },
  "SequenceList": [],
  "SequenceListChecked": [],
  "SequenceDatabaseName": null,
  "ParameterFilesToUpload": {},
  "ParameterFoldersToUpload": {},
  "SequenceDBPathLinux": null,
  "SequenceDBPath": null,
  "SamplesFromLocalDevice": null,
  "SamplesToTransform": null,
  "IsLinux": true,
  "CanRunInLinux": true,
  "DockerBaseImage": "bioseqenv.0.3",
  "Parameters": "",
  "OutputPath": "",
  "StartWithScript": "",
  "ScriptModulesInFlowScript": {
    "GlobalScriptModules": [
      {
        "ModuleName": "ReadCSVTest",
        "LockUsername": null,
        "Comment": "",
        "WslCommand": {
          "CommandToken": "D1C1",
          "FlowScriptToken": null,
          "Command": "echo \u0022Read $[D.[SamplePath]] as csv file in bash script.\u0022\r\n\r\nwhile read -r line\r\ndo \r\n   IFS=\u0027,\u0027 read -ra my_array \u003C\u003C\u003C \u0022$line\u0022\r\n   echo \u0022my_array[0] = ${my_array[0]}  my_array[1] = ${my_array[1]}.\u0022\r\ndone \u003C $[D.[SamplePath]]\r\n\r\necho \r\necho \u0022Read $[D.[SamplePath]] as csv file as Rscript.\u0022\r\necho \r\n\r\nRscript -e \u0027df=read.csv(\u0022$[D.[SamplePath]]\u0022) ; lst1=list() ; for(i in 1:ncol(df)) {        lst1[[i]] \u003C- df[ , i]    } ; names(lst1)=colnames(df) ; print(lst1)\u0027\r\n\r\necho \r\necho \u0022Read $[D.[SamplePath]] as csv file with FlowScript directive.\u0022\r\necho \r\n\r\n#FS Rscript\r\ndf=read.csv(\u0022$[D.[SamplePath]]\u0022)  \r\nlst1=list()    \r\nfor(i in 1:ncol(df)) {  \r\n   lst1[[i]] \u003C- df[ , i]    \r\n}\r\nnames(lst1)=colnames(df)  \r\nprint(lst1)  \r\n#FS End",
          "IsNoop": false,
          "CondaPrefix": "",
          "Parms": [],
          "IncludeStandardOutput": true,
          "IsParallel": false,
          "IsSlurm": false,
          "IsDocker": false,
          "IsLinux": false,
          "LinuxJobRunning": false,
          "SlurmJobID": null,
          "SlurmParms": null,
          "WindowsWorkPath": null,
          "IgnoreExitCode": false,
          "WSLResponse": null,
          "ConditionRun": null,
          "ExitCodeConditionGoto": "",
          "Preprocess": null,
          "StandardOutputConditionGoto": "",
          "HDF_Command": null,
          "Prereqs": [
            "Data"
          ],
          "Thread": 0,
          "StandardOutputBypass": "",
          "WDL": null
        },
        "PublishOutput": false,
        "ConsolidateInput": false,
        "ConsolidatedCmdToken": "",
        "ExpectSamplesHeader": false,
        "RunAfterALLPrereqs": false,
        "RunAfterALLCmdToken": "",
        "OmitStep": false,
        "LastUpdate": "2022-08-30T13:42:28.9626135Z",
        "LastAuthor": "AGB465",
        "ScriptParmsList": [],
        "DockerMountMap": [],
        "DockerImage": null,
        "UserVariableList": {},
        "IsDocker": false,
        "IsSLURM": true,
        "Slurm_Resource_Request": 2,
        "Slurm_Min_Resources": {
          "CPUs": 2,
          "MemoryGB": 4,
          "Hours": 0.300000012
        },
        "Slurm_Moderate_Resources": {
          "CPUs": 6,
          "MemoryGB": 16,
          "Hours": 0.75
        },
        "Slurm_Max_Resources": {
          "CPUs": 16,
          "MemoryGB": 64,
          "Hours": 2
        },
        "WDL_Task": null,
        "WDL_Task_Inputs": null,
        "WDL_Task_Outputs": null,
        "CaseNumberList_JSON": null,
        "CaseNumberList_csv": null
      }
    ]
  },
  "LastUpdate": "2024-04-16T10:06:35.529726-06:00",
  "LastAuthor": "AGB465",
  "FindFolders": false,
  "InterfaceAdaptive": false,
  "CommandList": null,
  "RemoveReads": false,
  "SLURM_IsAvailable": false
}