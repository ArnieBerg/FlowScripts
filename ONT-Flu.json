{
  "FlowScriptName": "ONT-Flu",
  "TestConfig": {},
  "SubmissionTimeStamp": "1014075250",
  "LockUsername": null,
  "Comment": "The Salmonella FlowScript functions to predict Salmonella serotypes from raw Nanopore sequencing data. The pipeline uses flye to assemble the long reads, medaka for genome polishing, and SISTR for in-silico serotyping. When complete, the pipeline produces a single \u0027sistr_res_aggregate\u0027 file that aggregates the results from all the included samples.",
  "DataSourceType": 1,
  "SerializeDataSteps": false,
  "SampleList": {
    "PDS2100454-1": "1[S]/mnt/e/data/Dreamer/FluA/2021/InfASeq_Flongle_5samples_8Jan21_DP/PDS2100454_InfAseq_5samples_flongle/20210108_1415_X3_AFC781_40df58e7/fastq_pass/PDS2100454-1/",
    "PDS2100454-1_rep": "1[S]/mnt/e/data/Dreamer/FluA/2021/InfASeq_Flongle_5samples_8Jan21_DP/PDS2100454_InfAseq_5samples_flongle/20210108_1415_X3_AFC781_40df58e7/fastq_pass/PDS2100454-1_rep/",
    "PDS2100454-2": "1[S]/mnt/e/data/Dreamer/FluA/2021/InfASeq_Flongle_5samples_8Jan21_DP/PDS2100454_InfAseq_5samples_flongle/20210108_1415_X3_AFC781_40df58e7/fastq_pass/PDS2100454-2/",
    "PDS2100454-3": "1[S]/mnt/e/data/Dreamer/FluA/2021/InfASeq_Flongle_5samples_8Jan21_DP/PDS2100454_InfAseq_5samples_flongle/20210108_1415_X3_AFC781_40df58e7/fastq_pass/PDS2100454-3/",
    "PDS2100454-4": "1[S]/mnt/e/data/Dreamer/FluA/2021/InfASeq_Flongle_5samples_8Jan21_DP/PDS2100454_InfAseq_5samples_flongle/20210108_1415_X3_AFC781_40df58e7/fastq_pass/PDS2100454-4/"
  },
  "SequenceList": [],
  "SequenceListChecked": [],
  "SequenceDatabaseName": "hpsuis",
  "ParameterFilesToUpload": {},
  "ParameterFoldersToUpload": {},
  "SequenceDBPathLinux": "/mnt/e/data/database/hpsuis",
  "SequenceDBPath": "/mnt/e/data/database/hpsuis/hpsuis.fasta",
  "SamplesFromLocalDevice": {},
  "SamplesToTransform": null,
  "IsLinux": false,
  "CanRunInLinux": false,
  "DockerBaseImage": null,
  "Parameters": "ONT-Flu_Tree@[Bootstraps=1000]\r\nONT-Flu_Tree@[Threads=16]\r\nONT-Flu_Tree@[Phylo=--phylo]\r\n",
  "OutputPath": "[S]E:\\data\\Jimmy\\wf-flu_val\\wf-flu_test\\",
  "StartWithScript": null,
  "ScriptModulesInFlowScript": {
    "GlobalScriptModules": [
      {
        "ModuleName": "ONT-Flu",
        "LockUsername": null,
        "Comment": "",
        "WslCommand": {
          "CommandToken": "",
          "FlowScriptToken": null,
          "Command": "# create a symlink of data dir organized by barcodes\r\nmkdir $[O.]/data\r\n\r\nwhile read lines; do \r\nid=$(echo $lines | cut -f1 -d\u0027,\u0027)\r\npath=$(echo $lines | cut -f2 -d\u0027,\u0027)\r\n#barcode=$(ls $path | head -n1 | cut -f3 -d\u0027_\u0027)\r\nln -s $path $[O.]data/$id\r\necho ${id} \u003E\u003E $[O.]samples.csv\r\ndone \u003C $[O.]SampleList.csv\r\n\r\n# add column headers to samples.csv\r\nsed -i \u00271isample_id\u0027 $[O.]samples.csv\r\n\r\n# call wf-flu\r\nnextflow run epi2me-labs/wf-flu -r v0.0.3 \\\r\n--fastq $[O.]data \\\r\n--out_dir $[O.] \\\r\n--sample_sheet $[O.]samples.csv \\\r\n--downsample @[Downsample=1000] \\\r\n--min_coverage @[Min_coverage=30] \\\r\n@[Resume=-resume] \\\r\n-with-tower\r\n\r\n# filter highly incomplete sequences in draft consensus\r\nwhile read lines; do\r\nid=$(echo $lines | cut -f2 -d\u0027,\u0027)\r\nconda run -n seqkit-2.2.0 seqkit fx2tab -C N $[O.]$id.draft.consensus.fasta | awk \u0027$3 \u003C= 100\u0027 \u003E $[O.]$id.draft.consensus.tab\r\nconda run -n seqkit-2.2.0 seqkit tab2fx $[O.]$id.draft.consensus.tab \u003E $[O.]$id.draft.consensus.fasta\r\nrm $[O.]$id.draft.consensus.tab\r\ndone \u003C \u003C(tail -n \u002B2 $[O.]samples.csv)\r\n",
          "IsNoop": false,
          "CondaPrefix": "",
          "Parms": [],
          "IncludeStandardOutput": true,
          "IsParallel": false,
          "IsSlurm": false,
          "IsDocker": false,
          "IsLinux": false,
          "LinuxJobRunning": false,
          "SlurmJobID": null,
          "SlurmParms": null,
          "WindowsWorkPath": null,
          "IgnoreExitCode": false,
          "WSLResponse": null,
          "ConditionRun": null,
          "ExitCodeConditionGoto": "",
          "Preprocess": null,
          "StandardOutputConditionGoto": "",
          "HDF_Command": null,
          "Prereqs": [
            "Data"
          ],
          "Thread": 0,
          "StandardOutputBypass": "",
          "WDL": null
        },
        "PublishOutput": false,
        "ConsolidateInput": true,
        "ConsolidatedCmdToken": null,
        "ExpectSamplesHeader": false,
        "RunAfterALLPrereqs": false,
        "RunAfterALLCmdToken": null,
        "OmitStep": false,
        "LastUpdate": "2022-10-13T16:10:15.5982251-06:00",
        "LastAuthor": "SQA032",
        "ScriptParmsList": [
          {
            "ModuleName": "ONT-Flu",
            "ParmName": "Min_coverage",
            "DefaultValue": "30",
            "UserValue": "30",
            "Description": "",
            "ComboValues": null,
            "Optional": false,
            "ReadOnly": false,
            "Hidden": false,
            "DeleteFlag": false,
            "DataType": 0,
            "Validator": null,
            "Extensions": "",
            "MissingValue": "",
            "Public": false
          },
          {
            "ModuleName": "ONT-Flu",
            "ParmName": "Resume",
            "DefaultValue": "-resume",
            "UserValue": "-resume",
            "Description": "Resume the previous run.",
            "ComboValues": "-resume",
            "Optional": true,
            "ReadOnly": false,
            "Hidden": false,
            "DeleteFlag": false,
            "DataType": 1,
            "Validator": null,
            "Extensions": "",
            "MissingValue": "",
            "Public": false
          },
          {
            "ModuleName": "ONT-Flu",
            "ParmName": "Downsample",
            "DefaultValue": "1000",
            "UserValue": "1000",
            "Description": "Number of reads to downsample to when generating consensus.",
            "ComboValues": null,
            "Optional": false,
            "ReadOnly": false,
            "Hidden": false,
            "DeleteFlag": false,
            "DataType": 2,
            "Validator": null,
            "Extensions": "",
            "MissingValue": "",
            "Public": false
          }
        ],
        "DockerMountMap": [],
        "DockerImage": null,
        "UserVariableList": {},
        "IsDocker": false,
        "IsSLURM": true,
        "Slurm_Resource_Request": 0,
        "Slurm_Min_Resources": null,
        "Slurm_Moderate_Resources": null,
        "Slurm_Max_Resources": null,
        "WDL_Task": null,
        "WDL_Task_Inputs": null,
        "WDL_Task_Outputs": null,
        "CaseNumberList_JSON": null,
        "CaseNumberList_csv": null
      },
      {
        "ModuleName": "ONT-Flu_Publish",
        "LockUsername": null,
        "Comment": "",
        "WslCommand": {
          "CommandToken": "",
          "FlowScriptToken": null,
          "Command": "# create dir structure\r\nmkdir $[O.]reports\r\n\r\n# copy general files\r\ncp -r $[I{ONT-Flu}.]execution $[O.]pipeline_info\r\ncp $[I{ONT-Flu}.]wf-flu-report.html $[O.]reports\r\ncp $[I{ONT-Flu}.]wf-flu-results.csv $[O.]\r\n\r\n# create sample dirs and copy outputs\r\nwhile read lines; do\r\nid=$(echo $lines | cut -f2 -d\u0027,\u0027)\r\nmkdir $[O.]$id\r\ncp $[I{ONT-Flu}.]$id.* $[O.]$id/\r\ndone \u003C \u003C($[I.]samples.csv)\r\n\r\n# copy tree output if exists\r\nif test -d $[I{ONT-Flu_Tree}.]tree; then\r\nfor i in $(ls $[I{ONT-Flu_Tree}.]tree); do\r\nfor j in $(ls $[I{ONT-Flu_Tree}.]tree/$i); do\r\nif test -f $[I{ONT-Flu_Tree}.]tree/$i/$j/$j.raxml.support; then\r\nmkdir -p $[O.]tree/$i/$j\r\ncp $[I{ONT-Flu_Tree}.]tree/$i/$j/$j.raxml.support $[O.]tree/$i/$j/$j.nwk\r\nfi\r\ndone\r\ndone\r\nfi",
          "IsNoop": false,
          "CondaPrefix": "",
          "Parms": [],
          "IncludeStandardOutput": false,
          "IsParallel": false,
          "IsSlurm": false,
          "IsDocker": false,
          "IsLinux": false,
          "LinuxJobRunning": false,
          "SlurmJobID": null,
          "SlurmParms": null,
          "WindowsWorkPath": null,
          "IgnoreExitCode": false,
          "WSLResponse": null,
          "ConditionRun": null,
          "ExitCodeConditionGoto": "",
          "Preprocess": null,
          "StandardOutputConditionGoto": "",
          "HDF_Command": null,
          "Prereqs": [
            "ONT-Flu",
            "ONT-Flu_Tree"
          ],
          "Thread": 0,
          "StandardOutputBypass": "",
          "WDL": null
        },
        "PublishOutput": true,
        "ConsolidateInput": false,
        "ConsolidatedCmdToken": null,
        "ExpectSamplesHeader": false,
        "RunAfterALLPrereqs": false,
        "RunAfterALLCmdToken": null,
        "OmitStep": false,
        "LastUpdate": "2022-10-13T16:51:26.6615884-06:00",
        "LastAuthor": "SQA032",
        "ScriptParmsList": [],
        "DockerMountMap": [],
        "DockerImage": null,
        "UserVariableList": {},
        "IsDocker": false,
        "IsSLURM": true,
        "Slurm_Resource_Request": 0,
        "Slurm_Min_Resources": null,
        "Slurm_Moderate_Resources": null,
        "Slurm_Max_Resources": null,
        "WDL_Task": null,
        "WDL_Task_Inputs": null,
        "WDL_Task_Outputs": null,
        "CaseNumberList_JSON": null,
        "CaseNumberList_csv": null
      },
      {
        "ModuleName": "ONT-Flu_Tree",
        "LockUsername": null,
        "Comment": "",
        "WslCommand": {
          "CommandToken": "",
          "FlowScriptToken": null,
          "Command": "# exit if any command fails\r\nset -e\r\n\r\n# run the following build tree steps only if --phylo is invoked\r\n\r\nif [[ @[Phylo=--phylo] == \u0022--phylo\u0022 ]]; then\r\n\r\necho \u0022Building phylogenetic tree from vcf outputs generated by wf-flu...\u0022\r\n\r\n# create tree workdir\r\nmkdir $[O.]tree\r\n\r\n# organize and process vcf by subtypes\r\n# ignore mixed subtypes\r\n\r\n## create species and H subtype work dir\r\nsubtypes=$(conda run -n seqkit-2.2.0 seqkit seq -ni $[I.]*.fasta | grep HA | sed \u0027s/HA_//g\u0027 | sort -u)\r\nfor i in $subtypes; do \r\nspecies=$(echo $i | cut -f1 -d\u0027_\u0027)\r\nsubtype=$(echo $i | cut -f2 -d\u0027_\u0027)\r\nmkdir -p $[O.]tree/$species/$subtype\r\ndone\r\n\r\n## get sample ids of each H subtype and species\r\nfor i in $(ls $[O.]tree); do\r\nfor j in $(ls $[O.]tree/$i); do\r\nfor x in $(ls $[I.] | grep fasta); do\r\n# test if consensus fasta contains complete sequence of query H subtype\r\n# if yes, add sample id to sample list in query H subtype work dir\r\nif grep -q ${i}_HA_$j $[I.]$x; then\r\necho $(basename $x .draft.consensus.fasta) \u003E\u003E $[O.]tree/$i/$j/samples.txt\r\nfi\r\ndone\r\ndone\r\ndone\r\n\r\n## extract reference sequence of each H subtype\r\n### download master reference seqs from wf-flu Git repo\r\ngit -C $[O.] clone --single-branch --depth 1 https://github.com/epi2me-labs/wf-flu.git\r\nln -s $[O.]/wf-flu/data/primer_schemes/V1/consensus_irma.fasta $[O.]flu_refs.fa\r\n### extract H refs by subtypes in tree work dir (i is species; j is H subtype)\r\nfor i in $(ls $[O.]tree); do\r\nfor j in $(ls $[O.]tree/$i); do\r\n## proceed only if samples.txt contains 4 or more samples\r\nif [[ $(cat $[O.]tree/$i/$j/samples.txt | wc -l) -ge 4 ]]; then\r\nconda run -n samtools-1.9 samtools faidx $[O.]flu_refs.fa ${i}_HA_$j \u003E $[O.]tree/$i/$j/ref.fa\r\nfi\r\ndone\r\ndone\r\n\r\n## organize and process vcf files in each species and H subtype sub dir\r\n\r\n### set up\r\n#### pull vcf2msa python script\r\ngit -C $[O.] clone --single-branch --depth 1 https://github.com/edgardomortiz/vcf2phylip.git\r\n\r\n## (i is species; j is H subtype)\r\nfor i in $(ls $[O.]tree); do\r\nfor j in $(ls $[O.]tree/$i); do\r\n# proceed only if samples.txt contains 4 or more samples\r\nif [[ $(cat $[O.]tree/$i/$j/samples.txt | wc -l) -ge 4 ]]; then\r\n## consolidate vcf to a single dir\r\nwhile read lines; do\r\n### create sub dir to keep all vcf files\r\nmkdir -p $[O.]tree/$i/$j/vcf\r\n### rename sample name and bgzip vcf\r\ncat $[I.]$lines.annotate.filtered.vcf | sed \u0022s/SAMPLE$/$lines/g\u0022 | bgzip -c \u003E $[O.]tree/$i/$j/vcf/$lines.vcf.gz\r\n### filter variants in HA region only\r\nconda run -n bcftools bcftools view -Oz -r ${i}_HA_${j} $[O.]tree/$i/$j/vcf/$lines.vcf.gz \u003E $[O.]tree/$i/$j/vcf/$lines.vcf.gz.tmp \u0026\u0026 \\\r\nmv $[O.]tree/$i/$j/vcf/$lines.vcf.gz.tmp $[O.]tree/$i/$j/vcf/$lines.vcf.gz\r\n### index zipped vcf\r\ntabix -h -f -p vcf $[O.]tree/$i/$j/vcf/$lines.vcf.gz\r\ndone \u003C $[O.]tree/$i/$j/samples.txt\r\n\r\n## merge vcf with bcftools\r\nconda run -n bcftools bcftools merge -Oz $[O.]tree/$i/$j/vcf/*.vcf.gz -o $[O.]tree/$i/$j/combined.vcf.gz\r\nconda run -n bcftools bcftools index $[O.]tree/$i/$j/combined.vcf.gz\r\n## create msa from combined vcf\r\n### call vcf2msa.py\r\n### output: combined.$min_n.fasta\r\nmin_n=$(cat $[O.]tree/$i/$j/samples.txt | wc -l)\r\nconda run -n vcf2msa python $[O.]vcf2phylip/vcf2phylip.py -i $[O.]tree/$i/$j/combined.vcf.gz -m $min_n --output-folder $[O.]tree/$i/$j --fasta\r\n## run modeltest-ng to select best model\r\nconda run -n modeltest-ng modeltest-ng --input $[O.]tree/$i/$j/combined.min$min_n.fasta --output $[O.]tree/$i/$j/modeltest -p @[Threads=16]\r\nmodel=$(cat $[O.]tree/$i/$j/modeltest.out | grep Model: | head -n1 | sed \u0027s/ //g\u0027 | cut -f2 -d\u0027:\u0027)\r\n## build tree with raxml-ng using the best model\r\nconda run -n raxmlng raxml-ng --all --tree pars{10} --bs-trees @[Bootstraps=1000] --msa $[O.]tree/$i/$j/combined.min$min_n.fasta --model ${model} --prefix $[O.]tree/$i/$j/$j --threads @[Threads=16]\r\nfi\r\ndone\r\ndone\r\n\r\n# clean up git repos\r\nrm -rf $[O.]/wf-flu\r\nrm -rf $[O.]vcf2phylip/\r\n\r\nelse\r\necho \u0022Skipping phylogenetic analysis...\u0022\r\nfi",
          "IsNoop": false,
          "CondaPrefix": "",
          "Parms": [],
          "IncludeStandardOutput": true,
          "IsParallel": false,
          "IsSlurm": false,
          "IsDocker": false,
          "IsLinux": false,
          "LinuxJobRunning": false,
          "SlurmJobID": null,
          "SlurmParms": null,
          "WindowsWorkPath": null,
          "IgnoreExitCode": false,
          "WSLResponse": null,
          "ConditionRun": null,
          "ExitCodeConditionGoto": "",
          "Preprocess": null,
          "StandardOutputConditionGoto": "",
          "HDF_Command": null,
          "Prereqs": [
            "ONT-Flu"
          ],
          "Thread": 0,
          "StandardOutputBypass": "",
          "WDL": null
        },
        "PublishOutput": false,
        "ConsolidateInput": false,
        "ConsolidatedCmdToken": null,
        "ExpectSamplesHeader": false,
        "RunAfterALLPrereqs": false,
        "RunAfterALLCmdToken": null,
        "OmitStep": false,
        "LastUpdate": "2022-10-14T11:49:37.4165427-06:00",
        "LastAuthor": "SQA032",
        "ScriptParmsList": [
          {
            "ModuleName": "ONT-Flu_Tree",
            "ParmName": "Bootstraps",
            "DefaultValue": "1000",
            "UserValue": "1000",
            "Description": "Number of bootstrap replicates to run.",
            "ComboValues": null,
            "Optional": false,
            "ReadOnly": false,
            "Hidden": false,
            "DeleteFlag": false,
            "DataType": 2,
            "Validator": null,
            "Extensions": "",
            "MissingValue": "",
            "Public": false
          },
          {
            "ModuleName": "ONT-Flu_Tree",
            "ParmName": "Threads",
            "DefaultValue": "16",
            "UserValue": "16",
            "Description": "Number of CPU threads to allocate for analysis.",
            "ComboValues": null,
            "Optional": false,
            "ReadOnly": false,
            "Hidden": false,
            "DeleteFlag": false,
            "DataType": 2,
            "Validator": null,
            "Extensions": "",
            "MissingValue": "",
            "Public": false
          },
          {
            "ModuleName": "ONT-Flu_Tree",
            "ParmName": "Phylo",
            "DefaultValue": "--phylo",
            "UserValue": "--phylo",
            "Description": "Run phylogenetic analysis.",
            "ComboValues": "--phylo",
            "Optional": true,
            "ReadOnly": false,
            "Hidden": false,
            "DeleteFlag": false,
            "DataType": 1,
            "Validator": null,
            "Extensions": "",
            "MissingValue": "",
            "Public": false
          }
        ],
        "DockerMountMap": [],
        "DockerImage": null,
        "UserVariableList": {},
        "IsDocker": false,
        "IsSLURM": true,
        "Slurm_Resource_Request": 0,
        "Slurm_Min_Resources": null,
        "Slurm_Moderate_Resources": null,
        "Slurm_Max_Resources": null,
        "WDL_Task": null,
        "WDL_Task_Inputs": null,
        "WDL_Task_Outputs": null,
        "CaseNumberList_JSON": null,
        "CaseNumberList_csv": null
      }
    ]
  },
  "LastUpdate": "2022-11-08T13:17:19.8289769-06:00",
  "LastAuthor": "SQA032",
  "FindFolders": true,
  "InterfaceAdaptive": false,
  "CommandList": [
    {
      "CommandToken": "D1C1",
      "FlowScriptToken": "SamnSero",
      "Command": "echo 1812676-1,/mnt/e/data/Dreamer/Salmonella_serotyping/2022/Salmonella_14June22_DT/Salmonella_14June22_DT/20220614_1224_X3_FAT45607_f9c29905/fastq_pass/1812676-1/ \u003E\u003E /mnt/c/BioSeqDB/WSLProxyRoot/AGB465/Work/Salmonella/D1C1/samplelist.csv\necho 1827333-1,/mnt/e/data/Dreamer/Salmonella_serotyping/2022/Salmonella_14June22_DT/Salmonella_14June22_DT/20220614_1224_X3_FAT45607_f9c29905/fastq_pass/1827333-1/ \u003E\u003E /mnt/c/BioSeqDB/WSLProxyRoot/AGB465/Work/Salmonella/D1C1/samplelist.csv\necho 1830060-2,/mnt/e/data/Dreamer/Salmonella_serotyping/2022/Salmonella_14June22_DT/Salmonella_14June22_DT/20220614_1224_X3_FAT45607_f9c29905/fastq_pass/1830060-2/ \u003E\u003E /mnt/c/BioSeqDB/WSLProxyRoot/AGB465/Work/Salmonella/D1C1/samplelist.csv\necho 1903031-1,/mnt/e/data/Dreamer/Salmonella_serotyping/2022/Salmonella_14June22_DT/Salmonella_14June22_DT/20220614_1224_X3_FAT45607_f9c29905/fastq_pass/1903031-1/ \u003E\u003E /mnt/c/BioSeqDB/WSLProxyRoot/AGB465/Work/Salmonella/D1C1/samplelist.csv\necho 1921247-1,/mnt/e/data/Dreamer/Salmonella_serotyping/2022/Salmonella_14June22_DT/Salmonella_14June22_DT/20220614_1224_X3_FAT45607_f9c29905/fastq_pass/1921247-1/ \u003E\u003E /mnt/c/BioSeqDB/WSLProxyRoot/AGB465/Work/Salmonella/D1C1/samplelist.csv\necho 2005045-2,/mnt/e/data/Dreamer/Salmonella_serotyping/2022/Salmonella_14June22_DT/Salmonella_14June22_DT/20220614_1224_X3_FAT45607_f9c29905/fastq_pass/2005045-2/ \u003E\u003E /mnt/c/BioSeqDB/WSLProxyRoot/AGB465/Work/Salmonella/D1C1/samplelist.csv\nnextflow run jimmyliu1326/SamnSero_Nextflow -r v1.1 --input /mnt/c/BioSeqDB/WSLProxyRoot/AGB465/Work/Salmonella/D1C1/samplelist.csv --outdir /mnt/c/BioSeqDB/WSLProxyRoot/AGB465/Work/Salmonella/D1C1/ --annot --qc --notrim   ",
      "IsNoop": false,
      "CondaPrefix": "",
      "Parms": [],
      "IncludeStandardOutput": true,
      "IsParallel": true,
      "IsSlurm": false,
      "IsDocker": false,
      "IsLinux": false,
      "LinuxJobRunning": false,
      "SlurmJobID": null,
      "SlurmParms": null,
      "WindowsWorkPath": null,
      "IgnoreExitCode": false,
      "WSLResponse": {
        "ExitCode": 0,
        "StandardOutput": null,
        "StandardError": null,
        "LastCommand": null,
        "RestartCount": 0
      },
      "ConditionRun": null,
      "ExitCodeConditionGoto": "",
      "Preprocess": null,
      "StandardOutputConditionGoto": "",
      "HDF_Command": {
        "Command": 0,
        "DBFileName": null,
        "DBPath": null,
        "Dataset": {
          "SequenceList": [],
          "Standard_Reference_Sequence": "",
          "Standard_Reference_Name": ""
        },
        "DatasetName": "",
        "FindIn": "",
        "FindOut": "",
        "Sample": {
          "SampleName": "",
          "SampleDetail": null,
          "LIMSCaseNumber": null,
          "LIMSTestID": null,
          "LIMSSampleID": null,
          "Sequence": null,
          "SampleFileName": null
        }
      },
      "Prereqs": [],
      "Thread": 0,
      "StandardOutputBypass": "",
      "WDL": null
    },
    {
      "CommandToken": "D1C2",
      "FlowScriptToken": "BuscoConsolidate",
      "Command": "echo 1812676-1,/mnt/e/data/Dreamer/Salmonella_serotyping/2022/Salmonella_14June22_DT/Salmonella_14June22_DT/20220614_1224_X3_FAT45607_f9c29905/fastq_pass/1812676-1/ \u003E\u003E /mnt/c/BioSeqDB/WSLProxyRoot/AGB465/Work/Salmonella/D1C2/samplelist.csv\necho 1827333-1,/mnt/e/data/Dreamer/Salmonella_serotyping/2022/Salmonella_14June22_DT/Salmonella_14June22_DT/20220614_1224_X3_FAT45607_f9c29905/fastq_pass/1827333-1/ \u003E\u003E /mnt/c/BioSeqDB/WSLProxyRoot/AGB465/Work/Salmonella/D1C2/samplelist.csv\necho 1830060-2,/mnt/e/data/Dreamer/Salmonella_serotyping/2022/Salmonella_14June22_DT/Salmonella_14June22_DT/20220614_1224_X3_FAT45607_f9c29905/fastq_pass/1830060-2/ \u003E\u003E /mnt/c/BioSeqDB/WSLProxyRoot/AGB465/Work/Salmonella/D1C2/samplelist.csv\necho 1903031-1,/mnt/e/data/Dreamer/Salmonella_serotyping/2022/Salmonella_14June22_DT/Salmonella_14June22_DT/20220614_1224_X3_FAT45607_f9c29905/fastq_pass/1903031-1/ \u003E\u003E /mnt/c/BioSeqDB/WSLProxyRoot/AGB465/Work/Salmonella/D1C2/samplelist.csv\necho 1921247-1,/mnt/e/data/Dreamer/Salmonella_serotyping/2022/Salmonella_14June22_DT/Salmonella_14June22_DT/20220614_1224_X3_FAT45607_f9c29905/fastq_pass/1921247-1/ \u003E\u003E /mnt/c/BioSeqDB/WSLProxyRoot/AGB465/Work/Salmonella/D1C2/samplelist.csv\necho 2005045-2,/mnt/e/data/Dreamer/Salmonella_serotyping/2022/Salmonella_14June22_DT/Salmonella_14June22_DT/20220614_1224_X3_FAT45607_f9c29905/fastq_pass/2005045-2/ \u003E\u003E /mnt/c/BioSeqDB/WSLProxyRoot/AGB465/Work/Salmonella/D1C2/samplelist.csv\nconda run -n busco busco -m genome -f -i /mnt/c/BioSeqDB/WSLProxyRoot/AGB465/Work/Salmonella/D1C1/assembly/ --out_path /mnt/c/BioSeqDB/WSLProxyRoot/AGB465/Work/Salmonella/D1C2/ -o BuscoSummary -l bacteria_odb10\n\nwhile read -r line\ndo \n   IFS=\u0027,\u0027 read -ra my_array \u003C\u003C\u003C \u0022$line\u0022\n   echo \u0022Remove ${my_array[0]} subfolders.\u0022\n   rm -rf /mnt/c/BioSeqDB/WSLProxyRoot/AGB465/Work/Salmonella/D1C2/BuscoSummary/\u0022${my_array[0]}\u0022.fasta/logs\n   rm -rf /mnt/c/BioSeqDB/WSLProxyRoot/AGB465/Work/Salmonella/D1C2/BuscoSummary/\u0022${my_array[0]}\u0022.fasta/prodigal_output\n   rm -rf /mnt/c/BioSeqDB/WSLProxyRoot/AGB465/Work/Salmonella/D1C2/BuscoSummary/\u0022${my_array[0]}\u0022.fasta/run_bacteria_odb10\ndone \u003C /mnt/c/BioSeqDB/WSLProxyRoot/AGB465/Work/Salmonella/D1C2/samplelist.csv",
      "IsNoop": false,
      "CondaPrefix": "",
      "Parms": [],
      "IncludeStandardOutput": true,
      "IsParallel": true,
      "IsSlurm": false,
      "IsDocker": false,
      "IsLinux": false,
      "LinuxJobRunning": false,
      "SlurmJobID": null,
      "SlurmParms": null,
      "WindowsWorkPath": null,
      "IgnoreExitCode": false,
      "WSLResponse": {
        "ExitCode": 0,
        "StandardOutput": null,
        "StandardError": null,
        "LastCommand": null,
        "RestartCount": 0
      },
      "ConditionRun": null,
      "ExitCodeConditionGoto": "",
      "Preprocess": null,
      "StandardOutputConditionGoto": "",
      "HDF_Command": {
        "Command": 0,
        "DBFileName": null,
        "DBPath": null,
        "Dataset": {
          "SequenceList": [],
          "Standard_Reference_Sequence": "",
          "Standard_Reference_Name": ""
        },
        "DatasetName": "",
        "FindIn": "",
        "FindOut": "",
        "Sample": {
          "SampleName": "",
          "SampleDetail": null,
          "LIMSCaseNumber": null,
          "LIMSTestID": null,
          "LIMSSampleID": null,
          "Sequence": null,
          "SampleFileName": null
        }
      },
      "Prereqs": [
        "D1C1"
      ],
      "Thread": 0,
      "StandardOutputBypass": "",
      "WDL": null
    }
  ],
  "RemoveReads": false,
  "SLURM_IsAvailable": false
}